#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>

#include "args.h"

#include "debug.h"
#include "memory.h"

int bin_to_decimal(const char *bin_s_ptr);

int bin_to_decimal(const char *bin_s_ptr)
{
	unsigned int max = strlen(bin_s_ptr)-1;
	unsigned int digit = 0;
	unsigned decimal_number = 0;

	//unsigned int valor_aux = 1;		//para efetuar shift de cálculo do expoente
	unsigned int potencia, expoente = strlen(bin_s_ptr)-1;

	//1010
	for(int i = max; i >= 0; i--)
	{
		printf("%d\n", expoente);

		digit = bin_s_ptr[i] - '0';

		if(digit == 1)
		{
			potencia = (int) pow(2, expoente);
			decimal_number += digit*potencia;
		}

		expoente--;
	}

	printf("\n\tDecimal converted: %d\n\n", decimal_number);

	return 0;
}

int main(int argc, char *argv[])
{
	(void)argc; 
	(void)argv;

	struct gengetopt_args_info args;

	if(cmdline_parser(argc, argv, &args))
		ERROR(1, "Erro: execução de cmdline_parser\n");

	/*for(int i= 0; i < strlen(args.string_arg); i++)
	{
		if(strcmp(args.string_arg[i], "1") != 0 || strcmp(args.string_arg[i], "0") != 0)
		{
			ERROR(1, "\n\tinvalid binary string\n");
			exit(0);
		}
	}*/

	bin_to_decimal(args.string_arg);

	cmdline_parser_free(&args);

	return 0;
}


//version 2

/*unsigned int max = strlen(bin_s_ptr)-1, valor = 0, 
	decimal_number = 0;
	int digit = 0;

	//From the end of the string to the beginning
	for(int i = max; i >= 0; i--)
	{
		digit = bin_s_ptr[i] - '0';

		//does shift to the position if 
		if(digit == 1)
		{
			/*valor = i << bin_s_ptr[max];
			printf("%d\n", valor);
			valor += decimal_number;
		}
	}

	printf("\n\tDecimal converted: %d\n\n", decimal_number);*/